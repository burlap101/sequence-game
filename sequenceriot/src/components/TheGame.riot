<the-game>
  <div>
    <div id="board-div" class="board">
      <div>
        <div each="{(row, irow) in state.jsonBoard}">
          <boardcard
            each="{(card, icard) in row}"
            card="{card}"
            imgParams="{methods.imgParams(irow, icard)}"
            chipParams="{methods.chipParams(irow, icard)}"
            bcid="{ irow + '-' + icard }"
            data-card="{ card }"
            player-hand="{ state.playerHand }"
            player-turn="{ state.playerTurn }"
            
            jacks="{ state.jacks }"
            
            winnerFound="{ state.winnerFound }"
         / >
        </div>
      </div>
    </div>
    <h3 class="text-center my-2">Your Hand</h3>

    <div id="players-hand-div" class="text-center players-hand">
      <span
        each="{(card, icard) in state.playerHand}"
        class="players-card"
      >
        <img
          src="{'/assets/cards_v/' + card + '.svg'}"
          height="90"
          width="60"
          data-card="{card}"
          onclick="{methods.playJack}"
        />
      </span>
    </div>
    <div
      if="{ state.winnerFound }"
      class="alert alert-success text-primary"
      role="alert"
    >
      { state.theWinner.name }'s the winner!!!
    </div>
    <div
      if="{ state.playerTurn }"
      id="turn-indicator"
      class="alert alert-success"
      role="alert"
    >
      Your Turn
    </div>

    <div if="{ !state.playerTurn }" class="alert alert-warning" role="alert">
      { state.opponent.name }'s turn
    </div>
    <div if="{state.warning.isActive}" class="alert alert-danger" role="alert">
      { warningText }
    </div>
    <div
      if="{state.jacks.oneEyedSelected || state.jacks.twoEyedSelected}"
      class="alert alert-primary"
      role="alert"
    >
      A Jack is selected. Click any unoccupied position on the board (except the
      corner ones)
    </div>
  </div>

  <script>
  import boardcard from "./boardcard.riot";
  import { CardService } from "./assets/js/CardService";
  import { GameService } from "./assets/js/GameService";
  import jsonBoard from "./assets/json/board_orientation.json";
  import io from 'socket.io-client'
  import * as riot from 'riot'
  import store from './assets/js/store'

  const fills = {
    p: "#007BFF",
    a: "#41b882",
    u: "#000000"
  };

  const boardObj = (function() {
    let boardObject = {
      rows: []
    };

    for (let row of jsonBoard.jsonBoard.rows) {
      boardObject.rows.push(
        row.map(function(card) {
          return { name: card, isOccupied: false, fill: fills["p"] };
        })
      );
    }
    return boardObject;
  })();

  const baseUrl = "http://" + window.location.hostname + ":50135/api/game";
  const port = 50135;

  const viewBox = {
    xmin: 0,
    ymin: 0,
    width: 75,
    height: 50
  }
  const handBox = {
    width: 850,
    height: 150
  }
  
  riot.register('boardcard', boardcard);
  riot.mount('boardcard');
  
  
  export default function TheGame() {
    return {
      name: "TheGame",
      // props: ["socket", "myopponent", "gameid", "username"],
      state: {
        "viewBox": viewBox,
        "handBox": handBox,
        playerTurn: true,
        jacks: {
          twoEyed: ["jd", "jc"],
          oneEyed: ["jh", "js"],
          twoEyedSelected: false,
          oneEyedSelected: false,
          name: ""
        },
        warning: {
          text: "",
          isActive: false
        },
        winnerFound: false,
        theWinner: {},
        playerIdentifier: "",
        players: [],
        playerHand: [],
        opponent: "",
        theBoard: [],
        jsonBoard: [],
        username: "Jono",
        gameid: localStorage.getItem("gameid"),
        socket: io("http://" + window.location.hostname + ":" + port),
        error: "",
        lastPlayedBcid: ""
      },
      playJack(event) {
        if (this.state.jacks.oneEyed.includes(event.target.dataset.card)) {
          this.update({
            jacks: {
              oneEyedSelected : true,
              name : event.target.dataset.card
            }
          })
        } else if (this.state.jacks.twoEyed.includes(event.target.dataset.card)) {
          this.update({
            jacks: {
              oneEyedSelected : true,
              name : event.target.dataset.card
            }
          })
        }
      },
      takeTurn(cardName, bcid) {
        let position = {
          row: bcid.split("-")[0],
          col: bcid.split("-")[1]
        };
        if (this.state.playerTurn) {
          if (this.state.jacks.oneEyedSelected || this.state.jacks.twoEyedSelected) {
            this.state.socket.emit("card_played", {
              cardName: this.state.jacks.name,
              gameid: this.state.gameid,
              player: this.state.username
            });
          } else {
            this.state.socket.emit("card_played", {
              cardName: cardName,
              gameid: this.state.gameid,
              player: this.state.username
            });
          }
          this.state.socket.emit("take_turn", {
            gameid: this.state.gameid,
            position: position,
            s: this.state.playerIdentifier
          });
          this.state.playerTurn = !this.state.playerTurn;
          this.state.warning.isActive = false;
        } else {
          this.state.warning.isActive = true;
          this.state.warning.text = "It is not your turn";
        }
        this.state.jacks.twoEyedSelected = false; //TODO: Review this as this jsut a workaround for now.
        this.state.jacks.oneEyedSelected = false;
        this.state.warning.isActive = false;
      },

      methods: {
        chipParams: function(irow, icard) {
          return {
            r: viewBox.height / 50,
            opacity: 1.0,
            cx: viewBox.width / 20 + (icard * viewBox.width) / 10,
            cy: viewBox.height / 20 + (irow * viewBox.height) / 10
          };
        },
        imgParams: function(irow, icard) {
          return {
            height: viewBox.height / 11,
            width: viewBox.width / 11,
            x: viewBox.width / 200 + (icard * viewBox.width) / 10,
            y: viewBox.height / 200 + (irow * viewBox.height) / 10
          };
        },
        
        showWarning: function(text) {
          this.state.warning.isActive = true;
          this.state.warning.text = text;
        },
        attemptLogin: async (gameid, username) => {
          try {
            const res = await fetch(
              baseUrl + "?gameid=" + gameid + "&username=" + username
            );
            if (!res.ok) {
              throw Error("Game wasn't retrievable");
            }
            localStorage.setItem("gameid", gameid);
            localStorage.setItem("username", username);
            // this.$emit("next-app", "GameApp");
          } catch (err) {
            // this.state.error = err.message;
            console.log(err.message + "attempting to create a new game...");
          
          }
        },
        newGame: async function(gameid, username) {
          try {
            const res = await fetch(baseUrl, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                "username": username
              })
            });
            const resj = await res.json();
            console.log(resj);
            localStorage.setItem("gameid", resj.gameid);
            localStorage.setItem("username", username);
            // this.$emit("next-app", "GameApp");
          } catch (err) {
            this.state.error = err.message;
            console.log(err.message);
          }
        }
      },
      // watch: {
      //   myopponent: function() {
      //     this.state.opponent = this.state.myopponent;
      //   }
      // },
      async onBeforeMount(props, state) {
        // first creating the board object and initiating it
        // ["socket", "myopponent", "gameid", "username"]
        try {
          await this.methods.newGame(this.state.gameid, this.state.username);
        } catch(err) {
          console.log("onBeforeMount Error: " + err);
        }

        this.update( {
          myopponent: {
            name: "McSweaty"
          },
          gameid: localStorage.getItem('gameid'),
        });
        try {
          let jb = boardObj.rows;
          let theGame = await GameService.getGame(this.state.gameid, this.state.username);
          console.log(theGame);
          for (let i = 0; i < 10; i++) {
            for (let j = 0; j < 10; j++) {
              if (theGame.board[i][j] != "u") {
                jb[i][j].isOccupied = true;
                jb[i][j].fill = fills[theGame.board[i][j].toLowerCase()];
              }
            }
          }
          let myTurn = (theGame.playerTurn === this.state.username);
          this.update({
            jsonBoard: jb,
            playerTurn: myTurn,
            players: theGame.players
          });
          console.log("stored the game ok.")
          
          for (let p of this.state.players) {
            if (p.name === this.state.username) {
              this.update( {
                playerIdentifier: p.s
              })
            } else {
              this.update( {
                opponent: p
              })
            }
          }
        } catch (err) {
          this.state.error = err.message;
          console.log(err.message);
          throw(err);
        }

        try {
          this.update({
            playerHand: await CardService.getCards(this.state.gameid, this.state.username)
          });
        } catch (err) {
          this.state.error = err.message;
          console.log(err.message);
          throw(err);
        }
        console.log(this.state.playerHand);
      },
      onMounted() {
        // now registering all the socket callbacks.
        this.state.socket.on("new_hand", newHand => {
          this.state.playerHand = newHand;
        });

        this.state.socket.on("game_update", theGame => {
          let jb = boardObj.rows;
          for (let i = 0; i < 10; i++) {
            for (let j = 0; j < 10; j++) {
              if (theGame.board[i][j] != "u") {
                jb[i][j].isOccupied = true;
                jb[i][j].fill = fills[theGame.board[i][j].toLowerCase()];
              }
            }
          }

          this.state.jsonBoard = jb;

          this.state.playerTurn = theGame.playerTurn == this.state.username;

          this.state.players = theGame.players;

          for (let p of theGame.players) {
            if (this.state.username !== p.name) {
              this.state.opponent = p;
              break;
            }
          }
          this.state.theWinner = theGame.theWinner;
          this.state.winnerFound = theGame.winnerFound;
        });
      },
      onUpdated() {
        if(this.state.lastPlayedBcid != this.bcid) {
          console.log(this.cardName + this.bcid);
        }
        if(this.state.warning.text != this.warningText && this.warningText != "") {
          this.state.warning.text = this.warningText;
          this.state.warning.isActive = true;
        }
      }
    }
  };

  
  </script>

  <style>
  .players-hand {
    margin: 1em;
    background: #797386;
    padding: 1em;
  }
  .players-card {
    margin: 0.5em;
  }
  .board {
    background: #a3a3a3;
  }
  </style>
</the-game>
